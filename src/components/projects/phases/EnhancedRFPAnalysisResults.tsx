'use client'

import { useState, useEffect, useCallback } from 'react'
import { supabase } from '@/lib/supabase/client'
import Button from '@/basic/src/components/Button/Button'
import Card from '@/basic/src/components/Card/Card'
import Badge from '@/basic/src/components/Badge/Badge'
import { IntegratedAnswerModal } from './IntegratedAnswerModal'
import { 
  FileText, 
  AlertTriangle,
  Target,
  Hash,
  ArrowRight,
  MessageSquare,
  TrendingUp,
  Users,
  CheckCircle,
  Loader,
  BrainCircuit,
  Lightbulb,
  BarChart3,
  UserSearch,
  Sparkles,
  User
} from 'lucide-react'
import { cn } from '@/lib/utils'
import type { RFPAnalysis, AnalysisQuestion } from '@/types/rfp-analysis'

interface EnhancedRFPAnalysisResultsProps {
  projectId: string
}

interface AnalysisData {
  analysis: RFPAnalysis
  follow_up_questions: AnalysisQuestion[]
  questionnaire_completed: boolean
  next_step_ready: boolean
  market_research_ready?: boolean
  secondary_analysis?: SecondaryAnalysisResult
}

interface SecondaryAnalysisResult {
  market_research_insights: {
    target_market_definition: string
    competitor_analysis_direction: string
    market_size_estimation: string
    key_market_trends: string[]
    research_priorities: string[]
  }
  persona_analysis_insights: {
    primary_persona_characteristics: string
    persona_pain_points: string[]
    persona_goals_motivations: string[]
    persona_scenarios: string[]
    research_focus_areas: string[]
  }
  enhanced_recommendations: {
    market_research_approach: string
    persona_research_methods: string[]
    data_collection_strategy: string
    analysis_timeline: string
    success_metrics: string[]
  }
  integration_points: {
    project_alignment: string
    resource_allocation: string
    timeline_coordination: string
    deliverable_connections: string[]
  }
}

export default function EnhancedRFPAnalysisResults({ projectId }: EnhancedRFPAnalysisResultsProps) {
  const [analysisData, setAnalysisData] = useState<AnalysisData[]>([])
  const [selectedAnalysis, setSelectedAnalysis] = useState<AnalysisData | null>(null)
  const [showQuestionnaire, setShowQuestionnaire] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  // AI ÌõÑÏÜç ÏßàÎ¨∏ ÏÉùÏÑ± Ìï®Ïàò (ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû•)
  const generateAIFollowUpQuestions = useCallback(async (analysisId: string) => {
    try {
      console.log('ü§ñ [ÌõÑÏÜçÏßàÎ¨∏-AI] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎßûÏ∂§ ÏßàÎ¨∏ ÏÉùÏÑ± ÏãúÏûë:', analysisId)

      // Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ï§ëÎ≥µ ÏÉùÏÑ± Î∞©ÏßÄ Î°úÏßÅ Ï†úÍ±∞ (Î¨¥ÌïúÎ£®ÌîÑ Î∞©ÏßÄ)
      // ÎåÄÏã† DBÏóêÏÑú ÏßÅÏ†ë ÌôïÏù∏

      // Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Î•º ÏßÅÏ†ë DBÏóêÏÑú Ï°∞ÌöåÌï¥ÏÑú ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Í≥†Ïú† Ï†ïÎ≥¥ Ï∂îÏ∂ú
      const { data: analysisRecord, error: analysisError } = await supabase
        .from('rfp_analyses')
        .select('*, projects(*)')
        .eq('id', analysisId)
        .single()
      
      if (analysisError || !analysisRecord) {
        console.error('‚ùå [ÌõÑÏÜçÏßàÎ¨∏-AI] Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', analysisError)
        throw new Error('RFP Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
      }

      // ÌîÑÎ°úÏ†ùÌä∏ ID ÌôïÏù∏ (ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû•)
      const projectId = (analysisRecord as any)?.project_id
      if (!projectId) {
        console.error('‚ùå [ÌõÑÏÜçÏßàÎ¨∏-AI] ÌîÑÎ°úÏ†ùÌä∏ IDÍ∞Ä ÏóÜÏñ¥ ÎèÖÎ¶ΩÏ†Å ÏßàÎ¨∏ ÏÉùÏÑ± Î∂àÍ∞Ä')
        throw new Error('ÌîÑÎ°úÏ†ùÌä∏ÏôÄ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùÄ Î∂ÑÏÑùÏùÄ ÌõÑÏÜç ÏßàÎ¨∏ÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.')
      }
      
      // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Î≥µÏû°ÏÑ± Ï†êÏàò Í≥ÑÏÇ∞
      const functionalReqs = (analysisRecord as any)?.functional_requirements?.length || 0
      const technicalReqs = (analysisRecord as any)?.technical_requirements?.length || 0
      const keywords = (analysisRecord as any)?.keywords?.length || 0
      const complexityScore = functionalReqs + technicalReqs + Math.floor(keywords / 3)
      
      // Î≥µÏû°ÏÑ±Ïóê Îî∞Î•∏ ÏßàÎ¨∏ Ïàò Í≤∞Ï†ï (ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏµúÏ†ÅÌôî)
      const maxQuestions = Math.max(6, Math.min(12, complexityScore + 4)) // 6-12Í∞ú Î≤îÏúÑ
      
      const requestBody = {
        analysis_id: analysisId,
        max_questions: maxQuestions,
        categories: ['market_context', 'target_audience', 'competitor_focus', 'technical_requirements'],
        project_context: {
          project_id: projectId,
          project_title: (analysisRecord as any)?.project_overview?.title,
          complexity_score: complexityScore
        }
      }
      
      console.log('üìä [ÌõÑÏÜçÏßàÎ¨∏-AI] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Î∂ÑÏÑù Ï†ïÎ≥¥:', {
        projectId,
        functionalReqs,
        technicalReqs, 
        keywords,
        complexityScore,
        maxQuestions
      })

      const response = await fetch('/api/rfp/generate-questions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      })

      console.log('üì° [ÌõÑÏÜçÏßàÎ¨∏-AI] API ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText)

      if (response.ok) {
        const responseData = await response.json()
        console.log('üì• [ÌõÑÏÜçÏßàÎ¨∏-AI] ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', responseData)
        
        const questions = responseData.questions || []
        console.log('‚úÖ [ÌõÑÏÜçÏßàÎ¨∏-AI] ÏÉùÏÑ± ÏôÑÎ£å:', questions.length, 'Í∞ú')
        
        if (questions.length > 0) {
          // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Î¨¥ÌïúÎ£®ÌîÑ Î∞©ÏßÄÎ•º ÏúÑÌï¥ Îã®ÏàúÌôî)
          console.log('üîÑ [ÌõÑÏÜçÏßàÎ¨∏-AI] ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë:', questions.length, 'Í∞ú')
          setAnalysisData(prev => 
            prev.map(data => 
              data.analysis.id === analysisId 
                ? { ...data, follow_up_questions: questions }
                : data
            )
          )
        } else {
          console.warn('‚ö†Ô∏è [ÌõÑÏÜçÏßàÎ¨∏-AI] ÏÉùÏÑ±Îêú ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.')
        }
      } else {
        const errorData = await response.text()
        console.error('‚ùå [ÌõÑÏÜçÏßàÎ¨∏-AI] ÏÉùÏÑ± Ïã§Ìå®:', {
          status: response.status,
          statusText: response.statusText,
          error: errorData
        })
        
        // Ïò§Î•ò Î∞úÏÉù ÏãúÏóêÎèÑ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌîºÎìúÎ∞± Ï†úÍ≥µ
        alert(`ÌõÑÏÜç ÏßàÎ¨∏ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${response.status} - ${response.statusText}`)
      }
    } catch (error) {
      console.error('üí• [ÌõÑÏÜçÏßàÎ¨∏-AI] Ï†ÑÏ≤¥ Ïò§Î•ò:', {
        error: error instanceof Error ? error.message : String(error),
        analysisId
      })
      alert(`ÌõÑÏÜç ÏßàÎ¨∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : String(error)}`)
    }
  }, [])

  // ÌõÑÏÜç ÏßàÎ¨∏ Î°úÎìú Ìï®Ïàò (ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ - DBÏóêÏÑú ÏßÅÏ†ë ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Î°úÎìú)
  const _loadFollowUpQuestions = useCallback(async (analysisId: string) => {
    try {
      console.log('üìã [ÌõÑÏÜçÏßàÎ¨∏] ÏµúÏã† ÌõÑÏÜç ÏßàÎ¨∏ Î°úÎìú ÏãúÏûë:', analysisId)
      
      // ‚úÖ Ïö∞ÏÑ† rfp_analyses ÌÖåÏù¥Î∏îÏóêÏÑú Ïã§Ï†ú Ï†ÄÏû•Îêú ÏßàÎ¨∏Îì§ Ï°∞Ìöå
      const { data: analysis, error: analysisError } = await supabase
        .from('rfp_analyses')
        .select('follow_up_questions')
        .eq('id', analysisId)
        .single()

      if (analysisError) {
        console.error('‚ùå [ÌõÑÏÜçÏßàÎ¨∏] rfp_analyses Ï°∞Ìöå Ïã§Ìå®:', analysisError)
        return
      }

      let followUpQuestions = (analysis as any)?.follow_up_questions || []
      console.log('üìã [ÌõÑÏÜçÏßàÎ¨∏] rfp_analysesÏóêÏÑú Î°úÎìúÎêú ÏßàÎ¨∏ Ïàò:', followUpQuestions.length)
      
      // ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞ ÏÉòÌîå Î°úÍ∑∏ (ÎîîÎ≤ÑÍπÖÏö©)
      if (followUpQuestions.length > 0) {
        console.log('üìã [ÌõÑÏÜçÏßàÎ¨∏] Ï≤´ Î≤àÏß∏ ÏßàÎ¨∏ ÏÉòÌîå:', {
          id: followUpQuestions[0]?.id,
          question_text: followUpQuestions[0]?.question_text?.substring(0, 50) + '...',
          category: followUpQuestions[0]?.category,
          created_at: followUpQuestions[0]?.created_at
        })
      }

      // ‚úÖ analysis_questions ÌÖåÏù¥Î∏îÏóêÏÑú Ï∂îÍ∞Ä ÎãµÎ≥Ä Ï†ïÎ≥¥Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
      const { data: detailedQuestions, error: questionsError } = await supabase
        .from('analysis_questions')
        .select('*')
        .eq('rfp_analysis_id', analysisId)
        .order('created_at', { ascending: true })

      // analysis_questionsÏóê Îçî ÏÉÅÏÑ∏Ìïú ÎãµÎ≥ÄÏù¥ ÏûàÎã§Î©¥ Î≥ëÌï©
      if (!questionsError && detailedQuestions && detailedQuestions.length > 0) {
        console.log('üìã [ÌõÑÏÜçÏßàÎ¨∏] analysis_questionsÏóêÏÑú Ï∂îÍ∞Ä ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨:', detailedQuestions.length, 'Í∞ú')
        
        // Í∏∞Ï°¥ ÏßàÎ¨∏Ïóê ÏÉÅÏÑ∏ ÎãµÎ≥Ä Ï†ïÎ≥¥ Î≥ëÌï©
        followUpQuestions = followUpQuestions.map((question: any) => {
          const detailedQuestion = detailedQuestions.find((dq: any) => dq.id === question.id)
          if (detailedQuestion) {
            return {
              ...question,
              user_answer: (detailedQuestion as any).user_answer,
              ai_generated_answer: (detailedQuestion as any).ai_generated_answer,
              answer_type: (detailedQuestion as any).answer_type,
              answered_at: (detailedQuestion as any).answered_at
            }
          }
          return question
        })
      }

      console.log('‚úÖ [ÌõÑÏÜçÏßàÎ¨∏] ÏµúÏ¢Ö Î°úÎìúÎêú ÏßàÎ¨∏ Ïàò:', followUpQuestions.length)

      // ‚úÖ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Î¨¥Ï°∞Í±¥ ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î°ú ÎçÆÏñ¥Ïì∞Í∏∞)
      if (followUpQuestions.length > 0) {
        setAnalysisData(prev => {
          const updated = prev.map(data => {
            if (data.analysis.id === analysisId) {
              console.log('üîÑ [ÌõÑÏÜçÏßàÎ¨∏] ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë - ID:', analysisId)
              return { 
                ...data, 
                follow_up_questions: followUpQuestions,
                questionnaire_completed: followUpQuestions.some((q: any) => q.user_answer)
              }
            }
            return data
          })
          return updated
        })
        console.log('‚úÖ [ÌõÑÏÜçÏßàÎ¨∏] ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å')
      } else {
        console.log('‚ö†Ô∏è [ÌõÑÏÜçÏßàÎ¨∏] Ï†ÄÏû•Îêú ÌõÑÏÜç ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§. AI ÏÉùÏÑ±ÏùÑ ÏãúÎèÑÌï©ÎãàÎã§.')
        // ÏßàÎ¨∏Ïù¥ ÏóÜÏúºÎ©¥ AI ÏÉùÏÑ± ÏãúÎèÑ
        await generateAIFollowUpQuestions(analysisId)
      }
    } catch (error) {
      console.error('üí• [ÌõÑÏÜçÏßàÎ¨∏] Ï†ÑÏ≤¥ Ïò§Î•ò:', {
        error: error instanceof Error ? error.message : String(error),
        analysisId
      })
    }
  }, [generateAIFollowUpQuestions])

  // Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå Ìï®Ïàò (ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû• Î∞è ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Î°úÎìú)
  const fetchAnalysisResults = useCallback(async (forceRefresh = false) => {
    try {
      setIsLoading(true)
      console.log('üîÑ [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë', forceRefresh ? '(Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®)' : '', 'Project ID:', projectId)
      
      // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ RFP Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå (ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Î≥¥Ïû•)
      const { data: analyses, error } = await supabase
        .from('rfp_analyses')
        .select(`
          *,
          rfp_documents (
            title,
            description,
            file_path,
            status
          )
        `)
        .eq('project_id', projectId)
        .order('created_at', { ascending: false })

      if (error) {
        console.error('‚ùå [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error)
        throw error
      }

      console.log('üìä [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå ÏôÑÎ£å:', {
        project_id: projectId,
        analyses_count: analyses?.length || 0,
        first_analysis_id: analyses?.[0]?.id
      })

      // Í∞Å Î∂ÑÏÑùÏóê ÎåÄÌï¥ ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const analysisDataList: (AnalysisData | null)[] = await Promise.all(
        analyses?.map(async (analysis) => {
          const analysisWithFollowUp = analysis as any
          console.log('üìä [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] Î°úÎìúÎêú Î∂ÑÏÑù:', analysis.id)
          
          // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Í≤ÄÏ¶ù: project_id ÏùºÏπò ÌôïÏù∏
          if (analysisWithFollowUp.project_id !== projectId) {
            console.warn('‚ö†Ô∏è [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏ ID Î∂àÏùºÏπò Í∞êÏßÄ:', {
              expected: projectId,
              actual: analysisWithFollowUp.project_id,
              analysis_id: analysis.id
            })
            // Îã§Î•∏ ÌîÑÎ°úÏ†ùÌä∏Ïùò Îç∞Ïù¥ÌÑ∞Îäî Ï†úÏô∏
            return null
          }

          // JSON ÌïÑÎìúÏùò follow_up_questionsÎ•º Í∏∞Î≥∏ÏúºÎ°ú ÏÇ¨Ïö© (ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω Îç∞Ïù¥ÌÑ∞)
          let finalQuestions = analysisWithFollowUp.follow_up_questions || []
          console.log('üìö [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏßàÎ¨∏ Î°úÎìú:', {
            project_id: projectId,
            analysis_id: analysis.id,
            questions_count: finalQuestions.length
          })
          
          // ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞ ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Í≤ÄÏ¶ù Î∞è Î°úÍ∑∏
          if (finalQuestions.length > 0) {
            const sampleQuestion = finalQuestions[0]
            console.log('üîç [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏßàÎ¨∏ ÏÉòÌîå ÌôïÏù∏:', {
              project_id: sampleQuestion?.project_id || 'N/A',
              question_id: sampleQuestion?.id,
              question_text: sampleQuestion?.question_text?.substring(0, 80) + '...',
              category: sampleQuestion?.category,
              is_project_specific: sampleQuestion?.project_id === projectId
            })
            
            // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Ïû¨Í≤ÄÏ¶ù
            finalQuestions = finalQuestions.filter((q: any) => 
              !q.project_id || q.project_id === projectId
            )
            console.log('‚úÖ [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏßàÎ¨∏ ÌïÑÌÑ∞ÎßÅ ÏôÑÎ£å:', finalQuestions.length, 'Í∞ú')
          } else {
            console.log('‚ö†Ô∏è [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏßàÎ¨∏Ïù¥ ÏóÜÏùå - AI ÏÉùÏÑ± ÌïÑÏöî')
          }
          
          // ÎãµÎ≥Ä ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
          const answeredQuestions = finalQuestions.filter((q: any) => {
            const hasUserAnswer = q.user_answer && q.user_answer.trim()
            const hasAIAnswer = q.ai_generated_answer && q.ai_generated_answer.trim()
            return hasUserAnswer || hasAIAnswer
          })
          
          console.log('üîç [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] JSON Í∏∞Î∞ò ÎãµÎ≥Ä ÏÉÅÌÉú ÏÉÅÏÑ∏:', {
            total_questions: finalQuestions.length,
            answered_questions: answeredQuestions.length,
            answers: finalQuestions.map((q: any) => ({
              id: q.id,
              has_user_answer: !!(q.user_answer && q.user_answer.trim()),
              has_ai_answer: !!(q.ai_generated_answer && q.ai_generated_answer.trim()),
              answer_type: q.answer_type,
              user_answer_preview: q.user_answer ? q.user_answer.substring(0, 50) + '...' : 'N/A',
              ai_answer_preview: q.ai_generated_answer ? q.ai_generated_answer.substring(0, 50) + '...' : 'N/A'
            }))
          })
          
          // analysis_questions ÌÖåÏù¥Î∏îÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Î≥¥Ï°∞ Îç∞Ïù¥ÌÑ∞)
          const { data: detailedQuestions, error: questionsError } = await (supabase as any)
            .from('analysis_questions')
            .select('*')
            .eq('rfp_analysis_id', analysis.id)
            .eq('project_id', projectId) // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû•
            .order('created_at', { ascending: true })

          if (!questionsError && detailedQuestions && detailedQuestions.length > 0) {
            console.log('ü§ñ [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:', {
              project_id: projectId,
              analysis_id: analysis.id,
              table_questions_count: detailedQuestions.length,
              project_validated: detailedQuestions.every((q: any) => q.project_id === projectId)
            })
            
            // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Ïû¨Í≤ÄÏ¶ù
            const validQuestions = detailedQuestions.filter((q: any) => q.project_id === projectId)
            if (validQuestions.length !== detailedQuestions.length) {
              console.warn('‚ö†Ô∏è [Îç∞Ïù¥ÌÑ∞Î¨¥Í≤∞ÏÑ±] ÌîÑÎ°úÏ†ùÌä∏ ID Î∂àÏùºÏπò ÏßàÎ¨∏ Î∞úÍ≤¨ Î∞è Ï†úÏô∏:', 
                detailedQuestions.length - validQuestions.length, 'Í∞ú')
            }
            
            // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Í≤ÄÏ¶ùÎêú ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞Î°ú JSON ÏßàÎ¨∏ ÏóÖÎç∞Ïù¥Ìä∏
            finalQuestions = finalQuestions.map((jsonQ: any) => {
              const tableQ = validQuestions.find((tq: any) => tq.id === jsonQ.id)
              if (tableQ) {
                console.log(`üîÑ [Îç∞Ïù¥ÌÑ∞ÎèôÍ∏∞Ìôî] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏßàÎ¨∏ ${jsonQ.id} ÏóÖÎç∞Ïù¥Ìä∏`)
                return {
                  ...jsonQ,
                  ai_generated_answer: tableQ.ai_generated_answer || jsonQ.ai_generated_answer,
                  user_answer: tableQ.user_answer || jsonQ.user_answer,
                  answer_type: tableQ.answer_type || jsonQ.answer_type,
                  answered_at: tableQ.answered_at || jsonQ.answered_at,
                  project_id: projectId // ÌîÑÎ°úÏ†ùÌä∏ ID Î™ÖÏãúÏ†Å Î≥¥Ïû•
                }
              }
              return { ...jsonQ, project_id: projectId } // Î™®Îì† ÏßàÎ¨∏Ïóê ÌîÑÎ°úÏ†ùÌä∏ ID Î≥¥Ïû•
            })
            
            console.log('‚úÖ [Îç∞Ïù¥ÌÑ∞ÎèôÍ∏∞Ìôî] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏôÑÎ£å:', finalQuestions.length, 'Í∞ú')
          }
          
          // ÎãµÎ≥Ä ÏôÑÏÑ± ÏÉÅÌÉú ÌôïÏù∏ (AI ÎãµÎ≥ÄÎèÑ Ìè¨Ìï®)
          const isAnswerCompleted = analysisWithFollowUp.answers_analyzed === true ||
                                  finalQuestions.some((q: any) => {
                                    const hasUserAnswer = q.user_answer && q.user_answer.trim()
                                    const hasAIAnswer = q.ai_generated_answer && q.ai_generated_answer.trim()
                                    return hasUserAnswer || hasAIAnswer
                                  })
          
          console.log('üìã [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÎãµÎ≥Ä ÏôÑÎ£å ÏÉÅÌÉú ÌôïÏù∏:', {
            analysis_id: analysis.id,
            isAnswerCompleted,
            questions_count: finalQuestions.length,
            answered_questions: finalQuestions.filter((q: any) => {
              const hasUserAnswer = q.user_answer && q.user_answer.trim()
              const hasAIAnswer = q.ai_generated_answer && q.ai_generated_answer.trim()
              return hasUserAnswer || hasAIAnswer
            }).length
          })
          
          return {
            analysis: {
              ...analysis
            } as unknown as RFPAnalysis,
            follow_up_questions: finalQuestions,
            questionnaire_completed: isAnswerCompleted,
            next_step_ready: isAnswerCompleted,
            secondary_analysis: analysisWithFollowUp.secondary_analysis || null
          }
        }) || []
      )

      // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶ΩÏÑ± Í≤ÄÏ¶ù: null Í∞í Ï†úÍ±∞ Î∞è ÏµúÏ¢Ö Í≤ÄÏ¶ù
      const validAnalysisDataList = analysisDataList.filter(data => data !== null) as AnalysisData[]
      
      console.log('üîç [ÏµúÏ¢ÖÍ≤ÄÏ¶ù] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω Îç∞Ïù¥ÌÑ∞ ÏµúÏ¢Ö ÌôïÏù∏:', {
        project_id: projectId,
        total_analyses: analysisDataList.length,
        valid_analyses: validAnalysisDataList.length,
        filtered_out: analysisDataList.length - validAnalysisDataList.length,
        has_questions: validAnalysisDataList.map(data => ({
          analysis_id: data.analysis.id,
          questions_count: data.follow_up_questions.length,
          is_project_specific: data.follow_up_questions.every((q: any) => !q.project_id || q.project_id === projectId)
        }))
      })

      setAnalysisData(validAnalysisDataList)
      
      // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÑ†ÌÉùÎêú Î∂ÑÏÑù ÏóÖÎç∞Ïù¥Ìä∏
      if (validAnalysisDataList.length > 0) {
        const currentSelectedId = selectedAnalysis?.analysis.id
        const updatedSelectedAnalysis = currentSelectedId 
          ? validAnalysisDataList.find(data => data.analysis.id === currentSelectedId)
          : validAnalysisDataList[0]
        
        const finalSelected = updatedSelectedAnalysis || validAnalysisDataList[0]
        setSelectedAnalysis(finalSelected)
        
        console.log('‚úÖ [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω Î∂ÑÏÑù ÏÑ†ÌÉù ÏôÑÎ£å:', {
          project_id: projectId,
          selected_analysis_id: finalSelected.analysis.id,
          questions_count: finalSelected.follow_up_questions.length,
          is_completed: finalSelected.questionnaire_completed,
          is_project_specific: finalSelected.follow_up_questions.every((q: any) => !q.project_id || q.project_id === projectId)
        })
        
        // ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω ÌõÑÏÜç ÏßàÎ¨∏Ïù¥ ÏóÜÏúºÎ©¥ ÏûêÎèô ÏÉùÏÑ± Ìä∏Î¶¨Í±∞
        const firstAnalysis = validAnalysisDataList[0]
        if (!forceRefresh && firstAnalysis.follow_up_questions.length === 0) {
          console.log('ü§ñ [ÏûêÎèôÏÉùÏÑ±] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎßûÏ∂§ ÌõÑÏÜç ÏßàÎ¨∏ ÏÉùÏÑ± ÌïÑÏöî')
          // Î¨¥ÌïúÎ£®ÌîÑ Î∞©ÏßÄÎ•º ÏúÑÌï¥ Ï°∞Í±¥Î∂ÄÎ°úÎßå Ïã§Ìñâ
          generateAIFollowUpQuestions(firstAnalysis.analysis.id).catch(console.error)
        } else {
          console.log('‚úÖ [Í∏∞Ï°¥ÏßàÎ¨∏] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÎèÖÎ¶Ω ÌõÑÏÜç ÏßàÎ¨∏ Ï°¥Ïû¨:', {
            project_id: projectId,
            questions_count: firstAnalysis.follow_up_questions.length,
            sample_question: firstAnalysis.follow_up_questions[0]?.question_text?.substring(0, 50) + '...'
          })
        }
      } else {
        console.warn('‚ö†Ô∏è [Î∂ÑÏÑùÎç∞Ïù¥ÌÑ∞] ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Ïú†Ìö®Ìïú Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå:', {
          project_id: projectId,
          total_found: analysisDataList.length,
          valid_found: 0
        })
      }
    } catch (error) {
      console.error('Failed to fetch analysis results:', error)
    } finally {
      setIsLoading(false)
    }
  }, [projectId, generateAIFollowUpQuestions, selectedAnalysis?.analysis.id])

  useEffect(() => {
    fetchAnalysisResults()
  }, [fetchAnalysisResults])


  const handleNextStepTransition = (nextStep: 'market_research' | 'persona_analysis') => {
    if (!selectedAnalysis) return
    
    // ÎãµÎ≥Ä ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏
    const hasAnsweredQuestions = selectedAnalysis.follow_up_questions?.some((q: any) => {
      const hasUserAnswer = q.user_answer && q.user_answer.trim()
      const hasAIAnswer = q.ai_generated_answer && q.ai_generated_answer.trim()
      return hasUserAnswer || hasAIAnswer
    })
    
    if (!hasAnsweredQuestions) {
      alert('Î®ºÏ†Ä ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.')
      return
    }
    
    console.log('üîÑ [Îã®Í≥ÑÏ†ÑÌôò] RFP Î∂ÑÏÑù ‚Üí ' + nextStep, {
      analysisId: selectedAnalysis.analysis.id,
      projectId,
      questionsAnswered: hasAnsweredQuestions,
      totalQuestions: selectedAnalysis.follow_up_questions?.length || 0
    })
    
    // ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏Î°ú Îã®Í≥Ñ Ï†ÑÌôò Ïã†Ìò∏ Ï†ÑÎã¨ (RFP ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞ Ìè¨Ìï®)
    const event = new CustomEvent('rfp-analysis-next-step', {
      detail: { 
        nextStep, 
        analysisData: selectedAnalysis,
        projectId,
        rfpAnalysisId: selectedAnalysis.analysis.id,
        answeredQuestions: selectedAnalysis.follow_up_questions?.filter((q: any) => {
          const hasUserAnswer = q.user_answer && q.user_answer.trim()
          const hasAIAnswer = q.ai_generated_answer && q.ai_generated_answer.trim()
          return hasUserAnswer || hasAIAnswer
        }) || []
      }
    })
    window.dispatchEvent(event)
  }

  // ÌÜµÌï© Î™®Îã¨ÏóêÏÑú ÏÇ¨Ïö©Ìï† ÎãµÎ≥Ä Ï†ÄÏû• Ìï®Ïàò
  const handleAnswerSave = async (answersWithTypes: {[key: string]: {answer: string, type: 'user' | 'ai'}}) => {
    if (!selectedAnalysis) return

    try {
      console.log('üíæ [ÎãµÎ≥ÄÏ†ÄÏû•] ÏãúÏûë:', selectedAnalysis.analysis.id, answersWithTypes)
      
      // ÎãµÎ≥Ä Ï†ÄÏû• (ÌÉÄÏûÖ Ï†ïÎ≥¥ Ìè¨Ìï®)
      const updatedQuestions = await saveQuestionAnswersWithTypes(selectedAnalysis.analysis.id, answersWithTypes)
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ - ÎãµÎ≥Ä ÏôÑÎ£å ÌëúÏãú
      const updatedAnalysisData = {
        ...selectedAnalysis,
        follow_up_questions: updatedQuestions,
        questionnaire_completed: true,
        next_step_ready: true
      }
      
      setSelectedAnalysis(updatedAnalysisData)
      setAnalysisData(prev => 
        prev.map(data => 
          data.analysis.id === selectedAnalysis.analysis.id 
            ? updatedAnalysisData
            : data
        )
      )

      console.log('‚úÖ [ÎãµÎ≥ÄÏ†ÄÏû•] ÏôÑÎ£å - Îã§Ïùå Îã®Í≥Ñ Ï§ÄÎπÑ')
      
      // ÎãµÎ≥Ä Ï†ÄÏû• ÌõÑ ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Î°úÎìúÌïòÏó¨ UIÏóê Î∞òÏòÅ (Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®)
      console.log('üîÑ [Îç∞Ïù¥ÌÑ∞ÏÉàÎ°úÍ≥†Ïπ®] ÎãµÎ≥Ä Ï†ÄÏû• ÌõÑ ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î°úÎìú...')
      await fetchAnalysisResults(true) // Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®
      
      // Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Î™®Îã¨ Îã´Í∏∞ (UI ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å Î≥¥Ïû•)
      setTimeout(() => {
        setShowQuestionnaire(false)
        console.log('‚úÖ [UIÏóÖÎç∞Ïù¥Ìä∏] Î™®Îã¨ Îã´Í∏∞ Î∞è ÎãµÎ≥Ä ÌëúÏãú ÏôÑÎ£å')
      }, 500)
      
      console.log('‚úÖ [ÎãµÎ≥ÄÏ†ÄÏû•] Î™®Îì† Í≥ºÏ†ï ÏôÑÎ£å - Î∂ÑÏÑù Í≤∞Í≥º ÌéòÏù¥ÏßÄÏóêÏÑú ÎãµÎ≥Ä ÌôïÏù∏ Í∞ÄÎä•')
      
      // 2Ï∞® AI Î∂ÑÏÑùÏùÄ Î≥ÑÎèÑÎ°ú Ïã§Ìñâ (ÏûêÎèô Ïù¥Îèô ÏóÜÏù¥)
      console.log('üí° [ÏïàÎÇ¥] ÎãµÎ≥Ä ÏôÑÎ£å! Ïù¥Ï†ú ÏãúÏû•Ï°∞ÏÇ¨ÎÇò ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑùÏùÑ ÏàòÎèôÏúºÎ°ú ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§.')
      
    } catch (error) {
      console.error('‚ùå [ÎãµÎ≥ÄÏ†ÄÏû•] Ïã§Ìå®:', error)
      throw error
    }
  }


  // ÌõÑÏÜç ÏßàÎ¨∏ ÎãµÎ≥Ä Ï†ÄÏû• Ìï®Ïàò
  // ÏÉàÎ°úÏö¥ ÎãµÎ≥Ä Ï†ÄÏû• Ìï®Ïàò - ÌÉÄÏûÖ Ï†ïÎ≥¥ Ìè¨Ìï®
  const saveQuestionAnswersWithTypes = async (analysisId: string, answersWithTypes: {[key: string]: {answer: string, type: 'user' | 'ai'}}) => {
    try {
      console.log('üíæ [ÏßàÎ¨∏ÎãµÎ≥Ä] ÏßàÎ¨∏ ÎãµÎ≥Ä Ï†ÄÏû• ÏãúÏûë:', { 
        analysisId, 
        answersCount: Object.keys(answersWithTypes).length,
        answersWithTypes: Object.entries(answersWithTypes).map(([id, data]) => ({
          id, 
          type: data.type, 
          answer_preview: data.answer.substring(0, 100) + '...'
        }))
      })
      
      // Î®ºÏ†Ä ÌòÑÏû¨ RFP Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (JSON ÌïÑÎìúÏùò ÌõÑÏÜç ÏßàÎ¨∏ Ìè¨Ìï®)
      const { data: analysisData, error: analysisError } = await supabase
        .from('rfp_analyses')
        .select('*')
        .eq('id', analysisId)
        .single()

      if (analysisError) throw analysisError
      
      const currentQuestions = (analysisData as any).follow_up_questions || []
      console.log('üìö [ÏßàÎ¨∏ÎãµÎ≥Ä] ÌòÑÏû¨ JSON ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞:', currentQuestions.length, 'Í∞ú')

      // JSON ÏßàÎ¨∏ Îç∞Ïù¥ÌÑ∞Ïóê ÎãµÎ≥Ä ÏóÖÎç∞Ïù¥Ìä∏
      const updatedQuestions = currentQuestions.map((question: any) => {
        const answerData = answersWithTypes[question.id]
        if (answerData) {
          console.log(`üíæ [ÎãµÎ≥ÄÏ†ÄÏû•] ÏßàÎ¨∏ ${question.id} ÏóÖÎç∞Ïù¥Ìä∏:`, {
            type: answerData.type,
            answer: answerData.answer.substring(0, 100) + '...'
          })
          
          const updatedQuestion = {
            ...question,
            answer_type: answerData.type,
            answered_at: new Date().toISOString()
          }
          
          if (answerData.type === 'ai') {
            // AI ÎãµÎ≥ÄÏùÑ ÏÑ†ÌÉùÌïú Í≤ΩÏö∞: ai_generated_answerÏóê Ï†ÄÏû•ÌïòÍ≥† user_answerÎäî nullÎ°ú ÏÑ§Ï†ï
            updatedQuestion.ai_generated_answer = answerData.answer
            updatedQuestion.user_answer = null
          } else {
            // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏûÖÎ†•Ìïú Í≤ΩÏö∞: user_answerÏóê Ï†ÄÏû•
            updatedQuestion.user_answer = answerData.answer
            // ai_generated_answerÎäî Í∏∞Ï°¥Í∞í Ïú†ÏßÄ
          }
          
          console.log(`‚úÖ [ÎãµÎ≥ÄÏ†ÄÏû•] ÏßàÎ¨∏ ${question.id} Ï†ÄÏû• ÏôÑÎ£å:`, {
            user_answer: updatedQuestion.user_answer,
            ai_generated_answer: updatedQuestion.ai_generated_answer,
            answer_type: updatedQuestion.answer_type
          })
          
          return updatedQuestion
        }
        return question
      })

      // RFP Î∂ÑÏÑùÏùò JSON ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏ (Î©îÏù∏ Ï†ÄÏû•ÏÜå)
      console.log('üíæ [ÏßàÎ¨∏ÎãµÎ≥Ä] JSON ÌïÑÎìúÏóê ÎãµÎ≥Ä Ï†ÄÏû• Ï§ë...')
      const { error: updateError } = await supabase
        .from('rfp_analyses')
        .update({
          follow_up_questions: updatedQuestions,
          answers_analyzed: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', analysisId)

      if (updateError) {
        console.error('‚ùå [ÏßàÎ¨∏ÎãµÎ≥Ä] JSON ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', updateError)
        throw updateError
      }

      console.log('‚úÖ [ÏßàÎ¨∏ÎãµÎ≥Ä] JSON ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å')

      // analysis_questions ÌÖåÏù¥Î∏îÏóêÎèÑ Î∞±ÏóÖÏúºÎ°ú Ï†ÄÏû• (ÏÑ†ÌÉùÏ†Å)
      const updatePromises = updatedQuestions.map((question: any) => {
        const answerData = answersWithTypes[question.id]
        if (answerData) {
          // ÎãµÎ≥Ä ÌÉÄÏûÖÏóê Îî∞Îùº Ï†ÅÏ†àÌïú ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏
          const updateData: any = {
            answer_type: answerData.type,
            answered_at: new Date().toISOString()
          }
          
          if (answerData.type === 'ai') {
            // AI ÎãµÎ≥Ä ÏÑ†ÌÉùÏù∏ Í≤ΩÏö∞ÏóêÎèÑ user_answerÏóê Ï†ÄÏû• (ÏùºÍ¥ÄÎêú ÌëúÏãúÎ•º ÏúÑÌï¥)
            updateData.user_answer = answerData.answer
            // ai_generated_answerÎäî Í∏∞Ï°¥ Í∞í Ïú†ÏßÄ
          } else {
            // ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏù∏ Í≤ΩÏö∞ user_answer ÌïÑÎìúÏóê Ï†ÄÏû•
            updateData.user_answer = answerData.answer
            // AI ÎãµÎ≥ÄÏùÄ Í∏∞Ï°¥ Í∞í Ïú†ÏßÄ (ÎçÆÏñ¥Ïì∞ÏßÄ ÏïäÏùå)
          }
          
          return (supabase as any)
            .from('analysis_questions')
            .upsert({
              id: question.id,
              rfp_analysis_id: analysisId,
              question_text: question.question_text || question.question,
              question_type: question.question_type,
              category: question.category,
              priority: question.priority,
              context: question.context,
              options: question.options,
              next_step_impact: question.next_step_impact,
              order_index: question.order_index,
              created_at: question.created_at,
              ...updateData
            })
        }
        return Promise.resolve({ data: null, error: null })
      })

      // analysis_questions ÌÖåÏù¥Î∏î Î∞±ÏóÖ Ï†ÄÏû• (ÏóêÎü¨Í∞Ä ÏûàÏñ¥ÎèÑ Î¨¥Ïãú)
      try {
        const updateResults = await Promise.all(updatePromises)
        const updateErrors = updateResults.filter(result => result.error)
        
        console.log('üìä [ÏßàÎ¨∏ÎãµÎ≥Ä] analysis_questions Î∞±ÏóÖ Í≤∞Í≥º:', {
          total: updateResults.length,
          successful: updateResults.filter(r => !r.error).length,
          failed: updateErrors.length
        })
        
        if (updateErrors.length > 0) {
          console.warn('‚ö†Ô∏è [ÏßàÎ¨∏ÎãµÎ≥Ä] analysis_questions Î∞±ÏóÖ Ï†ÄÏû• Ïã§Ìå® (Î¨¥ÏãúÌïòÍ≥† Í≥ÑÏÜç):', updateErrors.length, 'Í∞ú')
        }
      } catch (backupError) {
        console.warn('‚ö†Ô∏è [ÏßàÎ¨∏ÎãµÎ≥Ä] analysis_questions Î∞±ÏóÖ Ï†ÄÏû• Ïã§Ìå® (Î¨¥ÏãúÌïòÍ≥† Í≥ÑÏÜç):', backupError)
      }
      
      console.log('‚úÖ [ÏßàÎ¨∏ÎãµÎ≥Ä] Î™®Îì† ÎãµÎ≥ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.')

      console.log('‚úÖ [ÏßàÎ¨∏ÎãµÎ≥Ä] ÎãµÎ≥Ä Ï†ÄÏû• ÏôÑÎ£å (JSON Í∏∞Î∞ò)')
      return updatedQuestions
      
    } catch (error) {
      console.error('‚ùå [ÏßàÎ¨∏ÎãµÎ≥Ä] ÏßàÎ¨∏ ÎãµÎ≥Ä Ï†ÄÏû• Ïã§Ìå®:', error)
      throw error
    }
  }

  // Í∏∞Ï°¥ Ìï®Ïàò Ïú†ÏßÄ (Ìò∏ÌôòÏÑ±)
  const saveQuestionAnswers = async (analysisId: string, answers: {[key: string]: string}) => {
    try {
      console.log('üíæ [ÏßàÎ¨∏ÎãµÎ≥Ä] ÏßàÎ¨∏ ÎãµÎ≥Ä Ï†ÄÏû• Ï§ë...', { analysisId, answers })
      
      // Í∏∞Ï°¥ follow_up_questionsÎ•º Í∞ÄÏ†∏ÏôÄÏÑú ÎãµÎ≥Ä Ï∂îÍ∞Ä
      const { data: analysis, error: fetchError } = await supabase
        .from('rfp_analyses')
        .select('follow_up_questions')
        .eq('id', analysisId)
        .single()

      if (fetchError) throw fetchError

      const questions = (analysis as any)?.follow_up_questions || []
      const updatedQuestions = questions.map((question: any) => ({
        ...question,
        user_answer: answers[question.id] || '',
        answered_at: new Date().toISOString()
      }))

      // DBÏóê ÎãµÎ≥Ä ÏóÖÎç∞Ïù¥Ìä∏
      const { error: updateError } = await supabase
        .from('rfp_analyses')
        .update({ 
          follow_up_questions: updatedQuestions,
          updated_at: new Date().toISOString()
        })
        .eq('id', analysisId)

      if (updateError) throw updateError

      console.log('‚úÖ [ÏßàÎ¨∏ÎãµÎ≥Ä] Ï†ÄÏû• ÏôÑÎ£å')
      return updatedQuestions
    } catch (error) {
      console.error('‚ùå [ÏßàÎ¨∏ÎãµÎ≥Ä] Ï†ÄÏû• Ïã§Ìå®:', error)
      throw error
    }
  }

  // AI ÏûêÎèô ÎãµÎ≥Ä Ìï®Ïàò (ÌòÑÏû¨ ÎØ∏ÏÇ¨Ïö©)
  const _generateAIAnswers = async (analysisId: string) => {
    try {
      console.log('ü§ñ [AIÎãµÎ≥Ä] AI ÏûêÎèô ÎãµÎ≥Ä ÏÉùÏÑ± ÏãúÏûë...', analysisId)
      
      // ÌòÑÏû¨ Î∂ÑÏÑùÏùò ÌõÑÏÜç ÏßàÎ¨∏ Í∞ÄÏ†∏Ïò§Í∏∞
      const currentAnalysis = analysisData.find(data => data.analysis.id === analysisId)
      if (!(currentAnalysis as any)?.follow_up_questions?.length) {
        throw new Error('ÌõÑÏÜç ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.')
      }

      // Í∞Å ÏßàÎ¨∏Ïóê ÎåÄÌï¥ suggested_answerÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏûêÎèô ÎãµÎ≥Ä ÏÉùÏÑ±
      const autoAnswers: {[key: string]: string} = {}
      
      const questions = (currentAnalysis as any)?.follow_up_questions || []
      questions.forEach((question: any) => {
        if (question.suggested_answer) {
          autoAnswers[question.id] = question.suggested_answer
        }
      })

      console.log('ü§ñ [AIÎãµÎ≥Ä] ÏûêÎèô ÎãµÎ≥Ä ÏÉùÏÑ±:', Object.keys(autoAnswers).length, 'Í∞ú')
      
      // ÎãµÎ≥Ä Ï†ÄÏû•
      const updatedQuestions = await saveQuestionAnswers(analysisId, autoAnswers)
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setAnalysisData(prev => prev.map(data => 
        data.analysis.id === analysisId 
          ? { 
              ...data, 
              follow_up_questions: updatedQuestions,
              questionnaire_completed: true,
              next_step_ready: true
            }
          : data
      ))

      console.log('‚úÖ [AIÎãµÎ≥Ä] ÏôÑÎ£å Î∞è Îã§Ïùå Îã®Í≥Ñ Ï§ÄÎπÑ')
      
      // 2Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú ÏãúÏû• Ï°∞ÏÇ¨ Îã®Í≥ÑÎ°ú ÏßÑÌñâ
      setTimeout(() => {
        console.log('üîÑ [ÏûêÎèôÏßÑÌñâ] ÏãúÏû• Ï°∞ÏÇ¨ Îã®Í≥ÑÎ°ú ÏûêÎèô Ï†ÑÌôò...')
        handleNextStepTransition('market_research')
      }, 2000)
      
      return updatedQuestions
    } catch (error) {
      console.error('‚ùå [AIÎãµÎ≥Ä] Ïã§Ìå®:', error)
      throw error
    }
  }

  // 2Ï∞® Î∂ÑÏÑù Í≤∞Í≥º Î†åÎçîÎßÅ Ìï®Ïàò
  const renderSecondaryAnalysis = (secondaryAnalysis: SecondaryAnalysisResult) => {
    return (
      <Card className="p-6 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30">
        <div className="flex items-center gap-3 mb-6">
          <BrainCircuit className="h-6 w-6 text-blue-600" />
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
            2Ï∞® AI Î∂ÑÏÑù Í≤∞Í≥º
          </h3>
          <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
            Î∂ÑÏÑù ÏôÑÎ£å
          </span>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          {/* ÏãúÏû• Ï°∞ÏÇ¨ Ïù∏ÏÇ¨Ïù¥Ìä∏ */}
          <div className="space-y-4">
            <div className="flex items-center gap-2 mb-3">
              <BarChart3 className="h-5 w-5 text-purple-600" />
              <h4 className="text-lg font-medium text-gray-900 dark:text-white">
                ÏãúÏû• Ï°∞ÏÇ¨ Ïù∏ÏÇ¨Ïù¥Ìä∏
              </h4>
            </div>
            
            <div className="space-y-3">
              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  ÌÉÄÍ≤ü ÏãúÏû• Ï†ïÏùò
                </h5>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {secondaryAnalysis.market_research_insights?.target_market_definition || 'ÌÉÄÍ≤ü ÏãúÏû• Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
                </p>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  Í≤ΩÏüÅÏÇ¨ Î∂ÑÏÑù Î∞©Ìñ•
                </h5>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {secondaryAnalysis.market_research_insights?.competitor_analysis_direction || 'Í≤ΩÏüÅÏÇ¨ Î∂ÑÏÑù Î∞©Ìñ• Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
                </p>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  ÏãúÏû• Í∑úÎ™® Ï∂îÏ†ï
                </h5>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {secondaryAnalysis.market_research_insights?.market_size_estimation || 'ÏãúÏû• Í∑úÎ™® Ï∂îÏ†ï Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
                </p>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  ÌïµÏã¨ ÏãúÏû• Ìä∏Î†åÎìú
                </h5>
                <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                  {secondaryAnalysis.market_research_insights?.key_market_trends?.map((trend, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="text-purple-600 mt-1">‚Ä¢</span>
                      {trend}
                    </li>
                  )) || (
                    <li className="flex items-start gap-2">
                      <span className="text-purple-600 mt-1">‚Ä¢</span>
                      ÌïµÏã¨ ÏãúÏû• Ìä∏Î†åÎìú Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.
                    </li>
                  )}
                </ul>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  Ïó∞Íµ¨ Ïö∞ÏÑ†ÏàúÏúÑ
                </h5>
                <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                  {secondaryAnalysis.market_research_insights?.research_priorities?.map((priority, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="bg-purple-100 text-purple-600 px-2 py-1 rounded text-xs font-medium">
                        {index + 1}
                      </span>
                      {priority}
                    </li>
                  )) || (
                    <li className="flex items-start gap-2">
                      <span className="bg-purple-100 text-purple-600 px-2 py-1 rounded text-xs font-medium">
                        1
                      </span>
                      Ïó∞Íµ¨ Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.
                    </li>
                  )}
                </ul>
              </div>
            </div>
          </div>

          {/* ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑù Ïù∏ÏÇ¨Ïù¥Ìä∏ */}
          <div className="space-y-4">
            <div className="flex items-center gap-2 mb-3">
              <UserSearch className="h-5 w-5 text-orange-600" />
              <h4 className="text-lg font-medium text-gray-900 dark:text-white">
                ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑù Ïù∏ÏÇ¨Ïù¥Ìä∏
              </h4>
            </div>
            
            <div className="space-y-3">
              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  Ï£ºÏöî ÌéòÎ•¥ÏÜåÎÇò ÌäπÏÑ±
                </h5>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {secondaryAnalysis.persona_analysis_insights?.primary_persona_characteristics || 'Ï£ºÏöî ÌéòÎ•¥ÏÜåÎÇò ÌäπÏÑ± Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
                </p>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  ÌéòÎ•¥ÏÜåÎÇò Í≥†Ï∂©ÏÇ¨Ìï≠
                </h5>
                <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                  {secondaryAnalysis.persona_analysis_insights?.persona_pain_points?.map((pain, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="text-orange-600 mt-1">‚Ä¢</span>
                      {pain}
                    </li>
                  )) || (
                    <li className="flex items-start gap-2">
                      <span className="text-orange-600 mt-1">‚Ä¢</span>
                      ÌéòÎ•¥ÏÜåÎÇò Í≥†Ï∂©ÏÇ¨Ìï≠ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.
                    </li>
                  )}
                </ul>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  ÌéòÎ•¥ÏÜåÎÇò Î™©Ìëú Î∞è ÎèôÍ∏∞
                </h5>
                <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                  {secondaryAnalysis.persona_analysis_insights?.persona_goals_motivations?.map((goal, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="text-green-600 mt-1">‚Ä¢</span>
                      {goal}
                    </li>
                  )) || (
                    <li className="flex items-start gap-2">
                      <span className="text-green-600 mt-1">‚Ä¢</span>
                      ÌéòÎ•¥ÏÜåÎÇò Î™©Ìëú Î∞è ÎèôÍ∏∞ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.
                    </li>
                  )}
                </ul>
              </div>

              <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
                <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                  ÏÇ¨Ïö© ÏãúÎÇòÎ¶¨Ïò§
                </h5>
                <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                  {secondaryAnalysis.persona_analysis_insights?.persona_scenarios?.map((scenario, index) => (
                    <li key={index} className="flex items-start gap-2">
                      <span className="bg-orange-100 text-orange-600 px-2 py-1 rounded text-xs font-medium">
                        {index + 1}
                      </span>
                      {scenario}
                    </li>
                  )) || (
                    <li className="flex items-start gap-2">
                      <span className="bg-orange-100 text-orange-600 px-2 py-1 rounded text-xs font-medium">
                        1
                      </span>
                      ÏÇ¨Ïö© ÏãúÎÇòÎ¶¨Ïò§ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.
                    </li>
                  )}
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* ÌÜµÌï© Í∂åÏû•ÏÇ¨Ìï≠ */}
        <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
          <div className="flex items-center gap-2 mb-4">
            <Lightbulb className="h-5 w-5 text-yellow-600" />
            <h4 className="text-lg font-medium text-gray-900 dark:text-white">
              ÌÜµÌï© Í∂åÏû•ÏÇ¨Ìï≠
            </h4>
          </div>
          
          <div className="grid md:grid-cols-2 gap-4">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
              <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                ÏãúÏû•Ï°∞ÏÇ¨ Ï†ëÍ∑ºÎ≤ï
              </h5>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {secondaryAnalysis.enhanced_recommendations?.market_research_approach || 'ÏãúÏû•Ï°∞ÏÇ¨ Ï†ëÍ∑ºÎ≤ï Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
              </p>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
              <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï†ÑÎûµ
              </h5>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {secondaryAnalysis.enhanced_recommendations?.data_collection_strategy || 'Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï†ÑÎûµ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
              </p>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
              <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                Î∂ÑÏÑù ÏùºÏ†ï
              </h5>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {secondaryAnalysis.enhanced_recommendations?.analysis_timeline || 'Î∂ÑÏÑù ÏùºÏ†ï Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.'}
              </p>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-lg p-4">
              <h5 className="font-medium text-gray-900 dark:text-white mb-2">
                ÏÑ±Í≥µ ÏßÄÌëú
              </h5>
              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                {secondaryAnalysis.enhanced_recommendations?.success_metrics?.map((metric, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <span className="text-green-600 mt-1">‚Ä¢</span>
                    {metric}
                  </li>
                )) || (
                  <li className="flex items-start gap-2">
                    <span className="text-green-600 mt-1">‚Ä¢</span>
                    ÏÑ±Í≥µ ÏßÄÌëú Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.
                  </li>
                )}
              </ul>
            </div>
          </div>
        </div>

        {/* Îã§Ïùå Îã®Í≥Ñ Ïï°ÏÖò */}
        <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4">
            <div className="flex items-center gap-2 mb-3">
              <CheckCircle className="h-5 w-5 text-blue-600" />
              <h4 className="font-medium text-blue-900 dark:text-blue-100">
                2Ï∞® Î∂ÑÏÑù ÏôÑÎ£å - Îã§Ïùå Îã®Í≥Ñ ÏßÑÌñâ Í∞ÄÎä•
              </h4>
            </div>
            <p className="text-sm text-blue-700 dark:text-blue-300 mb-4">
              ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏùÑ Î∞îÌÉïÏúºÎ°ú Ìïú Ïã¨Ìôî Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Ïù¥Ï†ú Íµ¨Ï≤¥Ï†ÅÏù∏ Îç∞Ïù¥ÌÑ∞Î°ú ÏãúÏû• Ï°∞ÏÇ¨ÏôÄ ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑùÏùÑ ÏßÑÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </p>
            <div className="flex gap-2">
              <Button
                onClick={() => handleNextStepTransition('market_research')}
                className="bg-purple-600 hover:bg-purple-700 text-white"
              >
                <TrendingUp className="h-4 w-4 mr-2" />
                Í∞ïÌôîÎêú ÏãúÏû• Ï°∞ÏÇ¨ ÏãúÏûë
              </Button>
              <Button
                onClick={() => handleNextStepTransition('persona_analysis')}
                className="bg-orange-600 hover:bg-orange-700 text-white"
              >
                <Users className="h-4 w-4 mr-2" />
                Í∞ïÌôîÎêú ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑù ÏãúÏûë
              </Button>
            </div>
          </div>
        </div>
      </Card>
    )
  }


  const renderAnalysisOverview = (analysis: RFPAnalysis) => {
    return (
      <div className="space-y-6">
        {/* ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏöî */}
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <FileText className="h-5 w-5" />
            ÌîÑÎ°úÏ†ùÌä∏ Í∞úÏöî
          </h3>
          <div className="space-y-3">
            <div>
              <span className="font-medium text-gray-700 dark:text-gray-300">Ï†úÎ™©:</span>
              <p className="text-gray-900 dark:text-white mt-1">{analysis.project_overview.title}</p>
            </div>
            <div>
              <span className="font-medium text-gray-700 dark:text-gray-300">ÏÑ§Î™Ö:</span>
              <p className="text-gray-900 dark:text-white mt-1">{analysis.project_overview.description}</p>
            </div>
            <div>
              <span className="font-medium text-gray-700 dark:text-gray-300">Î≤îÏúÑ:</span>
              <p className="text-gray-900 dark:text-white mt-1">{analysis.project_overview.scope}</p>
            </div>
            {analysis.project_overview.objectives.length > 0 && (
              <div>
                <span className="font-medium text-gray-700 dark:text-gray-300">Î™©Ìëú:</span>
                <ul className="list-disc list-inside text-gray-900 dark:text-white mt-1 space-y-1">
                  {analysis.project_overview.objectives.map((objective, index) => (
                    <li key={index}>{objective}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </Card>

        {/* ÌïµÏã¨ ÌÇ§ÏõåÎìú */}
        {analysis.keywords.length > 0 && (
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Hash className="h-5 w-5" />
              ÌïµÏã¨ ÌÇ§ÏõåÎìú
            </h3>
            <div className="flex flex-wrap gap-2">
              {analysis.keywords.map((keyword, index) => (
                <span
                  key={index}
                  className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                    keyword.importance > 0.7 
                      ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                      : keyword.importance > 0.4
                      ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                      : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                  }`}
                >
                  {keyword.term}
                  <span className="ml-1 text-xs opacity-75">
                    ({Math.round(keyword.importance * 100)}%)
                  </span>
                </span>
              ))}
            </div>
          </Card>
        )}

        {/* ÏúÑÌóò ÏöîÏÜå */}
        {analysis.risk_factors.length > 0 && (
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              ÏúÑÌóò ÏöîÏÜå
            </h3>
            <div className="space-y-3">
              {analysis.risk_factors.map((risk, index) => (
                <div key={index} className="flex items-start gap-3 p-3 rounded-lg border">
                  <span
                    className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                      risk.level === 'high' 
                        ? 'bg-red-100 text-red-800'
                        : risk.level === 'medium'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-green-100 text-green-800'
                    }`}
                  >
                    {risk.level === 'high' ? 'ÎÜíÏùå' : risk.level === 'medium' ? 'Î≥¥ÌÜµ' : 'ÎÇÆÏùå'}
                  </span>
                  <div className="flex-1">
                    <p className="font-medium text-gray-900 dark:text-white">{risk.factor}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{risk.mitigation}</p>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        )}

        {/* 4Í∞ÄÏßÄ Í¥ÄÏ†ê Ïã¨Ï∏µ Î∂ÑÏÑù Í≤∞Í≥º */}
        <div className="grid md:grid-cols-2 gap-6">
          {/* Í∏∞Ìöç Í¥ÄÏ†ê Î∂ÑÏÑù */}
          {analysis.planning_analysis && Object.keys(analysis.planning_analysis).length > 0 && (
            <Card className="p-6 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-blue-600" />
                Í∏∞Ìöç Í¥ÄÏ†ê Î∂ÑÏÑù
              </h3>
              <div className="space-y-4">
                {analysis.planning_analysis.overview && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï¢ÖÌï© Î∂ÑÏÑù</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.planning_analysis.overview}</p>
                  </div>
                )}
                {analysis.planning_analysis.user_research_needs && Array.isArray(analysis.planning_analysis.user_research_needs) && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">ÏÇ¨Ïö©Ïûê Î¶¨ÏÑúÏπò ÌïÑÏöîÏÇ¨Ìï≠</h4>
                    <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                      {analysis.planning_analysis.user_research_needs.map((need, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-blue-600 mt-1">‚Ä¢</span>
                          {need}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                {analysis.planning_analysis.project_methodology && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï∂îÏ≤ú Î∞©Î≤ïÎ°†</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.planning_analysis.project_methodology}</p>
                  </div>
                )}
              </div>
            </Card>
          )}

          {/* ÎîîÏûêÏù∏ Í¥ÄÏ†ê Î∂ÑÏÑù */}
          {analysis.design_analysis && Object.keys(analysis.design_analysis).length > 0 && (
            <Card className="p-6 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <UserSearch className="h-5 w-5 text-purple-600" />
                ÎîîÏûêÏù∏ Í¥ÄÏ†ê Î∂ÑÏÑù
              </h3>
              <div className="space-y-4">
                {analysis.design_analysis.overview && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï¢ÖÌï© Î∂ÑÏÑù</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.design_analysis.overview}</p>
                  </div>
                )}
                {analysis.design_analysis.ui_ux_requirements && Array.isArray(analysis.design_analysis.ui_ux_requirements) && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">UI/UX ÏöîÍµ¨ÏÇ¨Ìï≠</h4>
                    <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                      {analysis.design_analysis.ui_ux_requirements.map((req, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-purple-600 mt-1">‚Ä¢</span>
                          {req}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                {analysis.design_analysis.design_system_needs && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú ÌïÑÏöîÏÑ±</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.design_analysis.design_system_needs}</p>
                  </div>
                )}
              </div>
            </Card>
          )}

          {/* ÌçºÎ∏îÎ¶¨Ïã± Í¥ÄÏ†ê Î∂ÑÏÑù */}
          {analysis.publishing_analysis && Object.keys(analysis.publishing_analysis).length > 0 && (
            <Card className="p-6 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <BarChart3 className="h-5 w-5 text-green-600" />
                ÌçºÎ∏îÎ¶¨Ïã± Í¥ÄÏ†ê Î∂ÑÏÑù
              </h3>
              <div className="space-y-4">
                {analysis.publishing_analysis.overview && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï¢ÖÌï© Î∂ÑÏÑù</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.publishing_analysis.overview}</p>
                  </div>
                )}
                {analysis.publishing_analysis.framework_recommendations && Array.isArray(analysis.publishing_analysis.framework_recommendations) && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï∂îÏ≤ú ÌîÑÎ†àÏûÑÏõåÌÅ¨</h4>
                    <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                      {analysis.publishing_analysis.framework_recommendations.map((framework, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-green-600 mt-1">‚Ä¢</span>
                          {framework}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                {analysis.publishing_analysis.component_architecture && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ïª¥Ìè¨ÎÑåÌä∏ ÏïÑÌÇ§ÌÖçÏ≤ò</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.publishing_analysis.component_architecture}</p>
                  </div>
                )}
              </div>
            </Card>
          )}

          {/* Í∞úÎ∞ú Í¥ÄÏ†ê Î∂ÑÏÑù */}
          {analysis.development_analysis && Object.keys(analysis.development_analysis).length > 0 && (
            <Card className="p-6 bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950/30 dark:to-red-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-orange-600" />
                Í∞úÎ∞ú Í¥ÄÏ†ê Î∂ÑÏÑù
              </h3>
              <div className="space-y-4">
                {analysis.development_analysis.overview && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï¢ÖÌï© Î∂ÑÏÑù</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.development_analysis.overview}</p>
                  </div>
                )}
                {analysis.development_analysis.architecture_pattern && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Ï∂îÏ≤ú ÏïÑÌÇ§ÌÖçÏ≤ò Ìå®ÌÑ¥</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{analysis.development_analysis.architecture_pattern}</p>
                  </div>
                )}
                {analysis.development_analysis.database_requirements && Array.isArray(analysis.development_analysis.database_requirements) && (
                  <div>
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏöîÍµ¨ÏÇ¨Ìï≠</h4>
                    <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                      {analysis.development_analysis.database_requirements.map((req, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-orange-600 mt-1">‚Ä¢</span>
                          {req}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </Card>
          )}
        </div>

        {/* Ïã†Î¢∞ÎèÑ Ï†êÏàò */}
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Target className="h-5 w-5" />
            Î∂ÑÏÑù Ïã†Î¢∞ÎèÑ
          </h3>
          <div className="flex items-center gap-4">
            <div className="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-3">
              <div 
                className="bg-blue-600 h-3 rounded-full transition-all duration-300"
                style={{ width: `${analysis.confidence_score * 100}%` }}
              />
            </div>
            <span className="text-lg font-semibold text-blue-600">
              {Math.round(analysis.confidence_score * 100)}%
            </span>
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
            {analysis.confidence_score > 0.8 
              ? 'Îß§Ïö∞ ÎÜíÏùÄ Ïã†Î¢∞ÎèÑÎ°ú Î∂ÑÏÑùÎêòÏóàÏäµÎãàÎã§.'
              : analysis.confidence_score > 0.6
              ? 'ÏñëÌò∏Ìïú Ïã†Î¢∞ÎèÑÎ°ú Î∂ÑÏÑùÎêòÏóàÏäµÎãàÎã§.'
              : 'Ï∂îÍ∞Ä Ï†ïÎ≥¥Í∞Ä ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.'
            }
          </p>
        </Card>
      </div>
    )
  }

  // ÌõÑÏÜç ÏßàÎ¨∏Í≥º ÎãµÎ≥Ä Î†åÎçîÎßÅ Ìï®Ïàò
  const renderFollowUpQuestions = (analysisData: AnalysisData) => {
    const questions = analysisData.follow_up_questions
    
    if (!questions || questions.length === 0) {
      return (
        <Card className="p-6 text-center">
          <div className="p-3 rounded-full bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/50 dark:to-blue-900/50 w-fit mx-auto mb-4">
            <Sparkles className="h-8 w-8 text-purple-600" />
          </div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            ÎßûÏ∂§Ìòï ÌõÑÏÜç ÏßàÎ¨∏ ÏÉùÏÑ± Ï§ë
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            RFP Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∞îÌÉïÏúºÎ°ú ÌîÑÎ°úÏ†ùÌä∏ ÎßûÏ∂§Ìòï ÏßàÎ¨∏ÏùÑ AIÍ∞Ä ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...
          </p>
          <div className="flex justify-center items-center gap-2">
            <Loader className="h-5 w-5 animate-spin text-purple-600" />
            <span className="text-sm text-purple-600 font-medium">AI Î∂ÑÏÑù Ï§ë</span>
          </div>
        </Card>
      )
    }

    // ÎãµÎ≥Ä ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏ (Í∞úÏÑ†Îêú Ìè¨Ïö©Ï†Å Î°úÏßÅ)
    const answeredQuestions = questions.filter(q => {
      const hasUserAnswer = (q as any).user_answer && (q as any).user_answer.trim()
      const hasAIAnswer = (q as any).ai_generated_answer && (q as any).ai_generated_answer.trim()
      const answerType = (q as any).answer_type
      const hasAnsweredAt = (q as any).answered_at
      
      console.log(`üîç [ÎãµÎ≥ÄÌôïÏù∏] ÏßàÎ¨∏ ${q.id}:`, {
        answerType,
        hasUserAnswer: !!hasUserAnswer,
        hasAIAnswer: !!hasAIAnswer,
        hasAnsweredAt: !!hasAnsweredAt,
        userAnswer: hasUserAnswer ? (q as any).user_answer.substring(0, 50) + '...' : null,
        aiAnswer: hasAIAnswer ? (q as any).ai_generated_answer.substring(0, 50) + '...' : null
      })
      
      // Ìè¨Ïö©Ï†Å ÎãµÎ≥Ä ÏôÑÎ£å ÌåêÏ†ï: Îã§Ïùå Ï§ë ÌïòÎÇòÎùºÎèÑ ÎßåÏ°±ÌïòÎ©¥ ÏôÑÎ£å
      const isCompleted = (
        // 1. answered_atÏù¥ ÏûàÍ≥† Ïñ¥Îñ§ ÌòïÌÉúÎ°úÎì† ÎãµÎ≥ÄÏù¥ ÏûàÎäî Í≤ΩÏö∞
        (hasAnsweredAt && (hasUserAnswer || hasAIAnswer)) ||
        // 2. answer_typeÏù¥ 'ai'Ïù¥Í≥† AI ÎãµÎ≥ÄÏù¥ ÏûàÎäî Í≤ΩÏö∞
        (answerType === 'ai' && hasAIAnswer) ||
        // 3. answer_typeÏù¥ 'user'Ïù¥Í≥† ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏù¥ ÏûàÎäî Í≤ΩÏö∞
        (answerType === 'user' && hasUserAnswer) ||
        // 4. answer_typeÏù¥ ÏóÜÏßÄÎßå ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏù¥ÎÇò AI ÎãµÎ≥ÄÏù¥ ÏûàÎäî Í≤ΩÏö∞
        (!answerType && (hasUserAnswer || hasAIAnswer))
      )
      
      if (isCompleted) {
        console.log(`‚úÖ [ÎãµÎ≥ÄÏôÑÎ£å] ÏßàÎ¨∏ ${q.id} - ÎãµÎ≥Ä ÏôÑÎ£åÎ°ú ÌåêÏ†ï`)
      } else {
        console.log(`‚ùå [ÎãµÎ≥ÄÎåÄÍ∏∞] ÏßàÎ¨∏ ${q.id} - ÎãµÎ≥Ä ÎåÄÍ∏∞ Ï§ë`)
      }
      
      return isCompleted
    })
    
    const totalQuestions = questions.length
    const completionRate = totalQuestions > 0 ? (answeredQuestions.length / totalQuestions) * 100 : 0
    const isCompleted = answeredQuestions.length === totalQuestions

    return (
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-2 rounded-lg bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/50 dark:to-blue-900/50">
              <Sparkles className="h-5 w-5 text-purple-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                ÎßûÏ∂§Ìòï ÌõÑÏÜç ÏßàÎ¨∏
              </h3>
              <p className="text-xs text-gray-600 dark:text-gray-400">
                RFP Î∂ÑÏÑù Í≤∞Í≥º Í∏∞Î∞ò AI ÏÉùÏÑ± ÏßàÎ¨∏
              </p>
            </div>
            <span className="px-3 py-1 bg-gradient-to-r from-purple-100 to-blue-100 text-purple-700 rounded-full text-sm font-medium">
              {totalQuestions}Í∞ú ÏßàÎ¨∏
            </span>
          </div>
          
          <Button
            onClick={() => setShowQuestionnaire(true)}
            className={`${isCompleted ? 'bg-green-600 hover:bg-green-700' : 'bg-blue-600 hover:bg-blue-700'}`}
          >
            <MessageSquare className="h-4 w-4 mr-2" />
            {isCompleted ? 'ÎãµÎ≥Ä ÏàòÏ†ïÌïòÍ∏∞' : 'ÏßàÎ¨∏ ÎãµÎ≥ÄÌïòÍ∏∞'}
          </Button>
        </div>

        {/* ÏßÑÌñâÎ•† ÌëúÏãú */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              ÎãµÎ≥Ä ÏôÑÎ£åÏú®
            </span>
            <span className="text-sm text-gray-600 dark:text-gray-400">
              {answeredQuestions.length} / {totalQuestions}
            </span>
          </div>
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div 
              className={`h-2 rounded-full transition-all duration-300 ${
                isCompleted ? 'bg-green-600' : 'bg-blue-600'
              }`}
              style={{ width: `${completionRate}%` }}
            />
          </div>
          {isCompleted && (
            <div className="flex items-center justify-between mt-3 p-3 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border border-green-200 dark:border-green-700">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <span className="text-sm text-green-600 font-medium">
                  Î™®Îì† ÏßàÎ¨∏ ÎãµÎ≥Ä ÏôÑÎ£å
                </span>
              </div>
              <Button 
                size="sm"
                className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white text-xs px-3 py-1"
                onClick={() => {
                  console.log('üöÄ [RFPÎ∂ÑÏÑù] Îã§Ïùå Îã®Í≥Ñ ÏßÑÌñâ - ÏãúÏû•Ï°∞ÏÇ¨Î°ú Ïù¥Îèô')
                  // Îã§Ïùå Îã®Í≥Ñ Ïù¥Î≤§Ìä∏ Î∞úÏÜ°
                  const event = new CustomEvent('rfp-analysis-next-step', {
                    detail: {
                      nextStep: 'market-research',
                      analysisData: analysisData,
                      analysisId: analysisData.analysis.id,
                      projectId: projectId
                    }
                  })
                  window.dispatchEvent(event)
                }}
              >
                <ArrowRight className="h-3 w-3 mr-1" />
                ÏãúÏû•Ï°∞ÏÇ¨ ÏãúÏûë
              </Button>
            </div>
          )}
        </div>

        {/* ÏßàÎ¨∏Í≥º ÎãµÎ≥Ä Î™©Î°ù */}
        <div className="space-y-4">
          {questions.map((question, index) => {
            const userAnswer = (question as any).user_answer
            const aiAnswer = (question as any).ai_generated_answer
            const answerType = (question as any).answer_type || 'user'
            
            // ÏÉÅÏÑ∏ ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏
            console.log(`üîç [ÎãµÎ≥ÄÌëúÏãú] ÏßàÎ¨∏ ${index + 1} ÏõêÏãú Îç∞Ïù¥ÌÑ∞:`, {
              questionId: question.id,
              question_text: question.question_text,
              raw_user_answer: question.user_answer,
              raw_ai_answer: question.ai_generated_answer,
              answer_type: question.answer_type,
              answered_at: question.answered_at
            })

            console.log(`üîç [ÎãµÎ≥ÄÌëúÏãú] ÏßàÎ¨∏ ${index + 1} ÌååÏã±Îêú Îç∞Ïù¥ÌÑ∞:`, {
              questionId: question.id,
              userAnswer: userAnswer ? userAnswer.substring(0, 50) + '...' : 'NULL',
              aiAnswer: aiAnswer ? aiAnswer.substring(0, 50) + '...' : 'NULL',
              answerType,
              hasUserAnswer: !!(userAnswer && userAnswer.trim()),
              hasAIAnswer: !!(aiAnswer && aiAnswer.trim())
            })
            
            // ÏÑ†ÌÉùÎêú ÎãµÎ≥Ä ÌÉÄÏûÖÏóê Îî∞Îùº ÌëúÏãúÌï† ÎãµÎ≥Ä Í≤∞Ï†ï
            let displayAnswer = ''
            let hasAnswer = false
            let actualAnswerType = answerType
            
            // Í∞ÑÎã®Ìïú ÎãµÎ≥Ä ÌëúÏãú Î°úÏßÅ - Îç∞Ïù¥ÌÑ∞ Ïö∞ÏÑ†ÏàúÏúÑ Í∏∞Ï§Ä
            if (userAnswer && userAnswer.trim()) {
              // ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©Ïûê ÎãµÎ≥Ä Ïö∞ÏÑ† ÌëúÏãú
              displayAnswer = userAnswer
              hasAnswer = true
              actualAnswerType = 'user'
            } else if (aiAnswer && aiAnswer.trim()) {
              // ÏÇ¨Ïö©Ïûê ÎãµÎ≥ÄÏù¥ ÏóÜÍ≥† AI ÎãµÎ≥ÄÏù¥ ÏûàÏúºÎ©¥ AI ÎãµÎ≥Ä ÏûêÎèô ÌëúÏãú
              displayAnswer = aiAnswer
              hasAnswer = true
              actualAnswerType = 'ai'
            } else {
              // Îëò Îã§ ÏóÜÏúºÎ©¥ ÎãµÎ≥Ä ÌïÑÏöî
              hasAnswer = false
              actualAnswerType = null
            }
            
            console.log(`üìù [ÎãµÎ≥ÄÌëúÏãú] ÏßàÎ¨∏ ${index + 1} ÏµúÏ¢Ö ÏÉÅÌÉú:`, {
              hasAnswer,
              actualAnswerType,
              displayAnswerPreview: displayAnswer ? displayAnswer.substring(0, 50) + '...' : 'N/A'
            })
            
            return (
              <div 
                key={question.id} 
                className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-900"
              >
                {/* ÏßàÎ¨∏ */}
                <div className="mb-3">
                  <div className="flex items-start gap-3">
                    <div className="flex-shrink-0 w-6 h-6 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded-full flex items-center justify-center text-sm font-medium">
                      {index + 1}
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900 dark:text-white mb-1">
                        {question.question_text || question.question}
                      </h4>
                      {question.context && (
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          {question.context}
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                {/* ÎãµÎ≥Ä */}
                {hasAnswer ? (
                  <div className="ml-9 bg-white dark:bg-gray-800 rounded-lg p-4 border-l-4 border-green-500">
                    <div className="flex items-center gap-2 mb-2">
                      {actualAnswerType === 'ai' ? (
                        <Sparkles className="h-4 w-4 text-purple-600" />
                      ) : (
                        <User className="h-4 w-4 text-blue-600" />
                      )}
                      <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        {actualAnswerType === 'ai' ? 'AI ÎãµÎ≥Ä' : 'ÏÇ¨Ïö©Ïûê ÎãµÎ≥Ä'}
                      </span>
                      {(question as any).answered_at && (
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {new Date((question as any).answered_at).toLocaleDateString('ko-KR')}
                        </span>
                      )}
                      {/* ÎîîÎ≤ÑÍπÖÏö© ÌëúÏãú */}
                      <span className="text-xs bg-gray-100 dark:bg-gray-700 px-1 rounded">
                        ID: {question.id}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
                      {displayAnswer}
                    </p>
                  </div>
                ) : (
                  <div className="ml-9 p-4 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                    <div className="flex items-center gap-2 text-gray-500 dark:text-gray-400">
                      <AlertTriangle className="h-4 w-4" />
                      <span className="text-sm">ÎãµÎ≥ÄÏù¥ ÌïÑÏöîÌï©ÎãàÎã§</span>
                    </div>
                  </div>
                )}
              </div>
            )
          })}
        </div>

        {/* Îã§Ïùå Îã®Í≥Ñ Î≤ÑÌäº */}
        {isCompleted && analysisData.next_step_ready && (
          <div className="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
            <div className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950/30 dark:to-blue-950/30 rounded-lg p-4">
              <div className="flex items-center gap-3 mb-3">
                <CheckCircle className="h-5 w-5 text-green-600" />
                <span className="font-medium text-green-700 dark:text-green-300">
                  ÎãµÎ≥Ä ÏôÑÎ£å! Îã§Ïùå Îã®Í≥ÑÎ°ú ÏßÑÌñâÌï† Ïàò ÏûàÏäµÎãàÎã§
                </span>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                Î™®Îì† ÌõÑÏÜç ÏßàÎ¨∏Ïóê ÎåÄÌïú ÎãµÎ≥ÄÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Ïù¥Ï†ú ÏãúÏû• Ï°∞ÏÇ¨ÎÇò ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </p>
              <div className="flex gap-2">
                <Button
                  onClick={() => handleNextStepTransition('market_research')}
                  className="bg-purple-600 hover:bg-purple-700 text-white"
                >
                  <TrendingUp className="h-4 w-4 mr-2" />
                  ÏãúÏû• Ï°∞ÏÇ¨ ÏãúÏûë
                </Button>
                <Button
                  onClick={() => handleNextStepTransition('persona_analysis')}
                  className="bg-orange-600 hover:bg-orange-700 text-white"
                >
                  <UserSearch className="h-4 w-4 mr-2" />
                  ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑù ÏãúÏûë
                </Button>
              </div>
            </div>
          </div>
        )}
      </Card>
    )
  }


  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="text-center py-8">
          <Loader className="h-8 w-8 animate-spin text-blue-600 mx-auto mb-4" />
          <p className="text-gray-500">RFP Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    )
  }

  if (analysisData.length === 0) {
    return (
      <div className="space-y-6">
        <Card className="p-8 text-center">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§
          </h3>
          <p className="text-gray-600 dark:text-gray-400 mb-4">
            RFP Î¨∏ÏÑúÎ•º ÏóÖÎ°úÎìúÌïòÍ≥† AI Î∂ÑÏÑùÏùÑ Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî
          </p>
          <Button
            onClick={() => window.history.back()}
            variant="outline"
          >
            <ArrowRight className="h-4 w-4 mr-2 transform rotate-180" />
            RFP Í¥ÄÎ¶¨Î°ú ÎèåÏïÑÍ∞ÄÍ∏∞
          </Button>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Î∂ÑÏÑù Í≤∞Í≥º Î™©Î°ù (Ïó¨Îü¨ Í∞úÏù∏ Í≤ΩÏö∞) */}
      {analysisData.length > 1 && (
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
            Î∂ÑÏÑù Í≤∞Í≥º ÏÑ†ÌÉù ({analysisData.length}Í∞ú)
          </h3>
          <div className="flex gap-2 flex-wrap">
            {analysisData.map((data, index) => (
              <Button
                key={data.analysis.id}
                onClick={() => setSelectedAnalysis(data)}
                variant={selectedAnalysis?.analysis.id === data.analysis.id ? "primary" : "outline"}
                className="text-sm"
              >
                Î∂ÑÏÑù {index + 1}
              </Button>
            ))}
          </div>
        </Card>
      )}

      {/* ÏÑ†ÌÉùÎêú Î∂ÑÏÑù Í≤∞Í≥º */}
      {selectedAnalysis && (
        <>
          <div className="flex items-center gap-4 mb-6">
            <div className="flex-1">
              <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                RFP Î∂ÑÏÑù Í≤∞Í≥º
              </h2>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Î∂ÑÏÑù ÏôÑÎ£å: {new Date(selectedAnalysis.analysis.created_at).toLocaleDateString('ko-KR')}
              </p>
            </div>
            
            {selectedAnalysis.next_step_ready && (
              <div className="flex gap-2">
                <Button
                  onClick={() => handleNextStepTransition('market_research')}
                  className="bg-purple-600 hover:bg-purple-700 text-white"
                >
                  <TrendingUp className="h-4 w-4 mr-2" />
                  ÏãúÏû• Ï°∞ÏÇ¨
                </Button>
                <Button
                  onClick={() => handleNextStepTransition('persona_analysis')}
                  className="bg-orange-600 hover:bg-orange-700 text-white"
                >
                  <Users className="h-4 w-4 mr-2" />
                  ÌéòÎ•¥ÏÜåÎÇò Î∂ÑÏÑù
                </Button>
              </div>
            )}
          </div>

          {/* Î∂ÑÏÑù Í≤∞Í≥º ÏÉÅÏÑ∏ */}
          {renderAnalysisOverview(selectedAnalysis.analysis)}
          
          {/* 2Ï∞® Î∂ÑÏÑù Í≤∞Í≥º ÏÑπÏÖò */}
          {selectedAnalysis.secondary_analysis && (
            <div className="mt-8">
              {renderSecondaryAnalysis(selectedAnalysis.secondary_analysis)}
            </div>
          )}

          {/* ÌõÑÏÜç ÏßàÎ¨∏ ÏÑπÏÖò - Í∞úÏÑ†Îêú UI */}
          <div className="mt-8">
            <div className="bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-950/30 dark:to-blue-950/30 rounded-xl p-6 border border-indigo-200 dark:border-indigo-800">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <div className="p-3 bg-indigo-100 dark:bg-indigo-900/50 rounded-xl">
                    <MessageSquare className="h-6 w-6 text-indigo-600" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                      Îã§Ïùå Îã®Í≥Ñ Ï§ÄÎπÑ - ÌõÑÏÜç ÏßàÎ¨∏ ÏãúÏä§ÌÖú
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Ï†ïÍµêÌïú Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ Ï∂îÍ∞Ä ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌï¥Ï£ºÏÑ∏Ïöî
                    </p>
                  </div>
                </div>
              
              {/* ÏãúÏä§ÌÖú ÎÇ¥Ïö© */}
              {renderFollowUpQuestions(selectedAnalysis)}
            </div>
          </div>
        </>
      )}

      {/* ÌÜµÌï©Îêú ÎãµÎ≥Ä ÏûëÏÑ± Î™®Îã¨ */}
      {showQuestionnaire && selectedAnalysis && (
        <IntegratedAnswerModal
          questions={selectedAnalysis.follow_up_questions}
          analysisId={selectedAnalysis.analysis.id}
          projectId={projectId}
          isOpen={showQuestionnaire}
          onClose={() => setShowQuestionnaire(false)}
          onSave={handleAnswerSave}
        />
      )}
    </div>
  )
}